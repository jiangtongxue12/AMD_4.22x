// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.22/esri/copyright.txt for details.
//>>built
define("exports ../../../../core/maybe ../../../../core/PooledArray ../../../../core/screenUtils ../../../../chunks/vec3 ../../../../chunks/vec3f64 ../../../../geometry/support/ray ../../../../geometry/support/vectorStacks ../../support/geometryUtils/ray ../../webgl-engine/lib/Intersector ../../webgl-engine/lib/intersectorUtils".split(" "),function(C,l,H,w,p,I,J,m,E,x,y){function F(q){z&&z.viewingMode===q||(z=x.newIntersector(q));return z}let K=function(){function q(a,b,c){this.viewingMode=a;this._forEachLayer=
b;this.view=c;this.externalIntersectionHandlers=new H;this.tolerance=x.DEFAULT_TOLERANCE;this.tmpRay=J.create();this.validateHUDIntersector=x.newIntersector(this.viewingMode);this.validateHUDIntersector.options.hud=!1}var h=q.prototype;h.intersectScreen=function(a,b){return this.intersectRay(this._getPickRay(a,this.tmpRay),F(this.viewingMode),b)};h.intersectScreenFreePointFallback=function(a,b){return this.intersectRayFreePointFallback(this._getPickRay(a,this.tmpRay),b)};h.intersectRayFreePointFallback=
function(a,b){return this.intersectRay(a,F(this.viewingMode),b)||this._intersectRayFreePointLocal(a,b)};h.intersectRay=function(a,b,c,d){b.options.selectionMode=!1;b.options.store=0;this.computeIntersection(a,b,d);return b.results.min?b.results.min.getIntersectionPoint(c):!1};h.getCenterRayWithSubpixelOffset=function(a,b,c=.5,d=.5){a.getRenderCenter(v,c,d);v[0]+=.0466;v[1]-=.0123;return E.fromRenderAtEye(a,v,b)};h.intersectIntersectorScreen=function(a,b,c){this.computeIntersection(this._getPickRay(a,
this.tmpRay),b,c)};h.intersectToolIntersectorScreen=function(a,b,c){a=this._getPickRay(a,this.tmpRay);this.intersectToolIntersectorRay(a,b,c)};h.intersectToolIntersectorRay=function(a,b,c){b.options.selectionMode=!0;this.computeIntersection(a,b,c);const d=b.results.min;this.view.basemapTerrain&&this.view.basemapTerrain.opaque||y.isValidIntersectorResult(d)&&2!==d.intersector||(b.options.selectionMode=!1,this.computeIntersection(a,b,c))};h.setTolerance=function(a=x.DEFAULT_TOLERANCE){this.tolerance=
a};h.addIntersectionHandler=function(a){this.externalIntersectionHandlers.push(a);this.externalIntersectionHandlers.sort((b,c)=>2===b.type?1:2===c.type?-1:0)};h.removeIntersectionHandler=function(a){this.externalIntersectionHandlers.removeUnordered(a);this.externalIntersectionHandlers.sort((b,c)=>2===b.type?1:2===c.type?-1:0)};h._getPickRay=function(a,b){return E.fromScreen(this.view.state.camera,a,b)};h._intersectRayFreePointLocal=function(a,b){if(2!==this.viewingMode||l.isNone(a))return!1;var c=
this.view.renderDataExtent;if(l.isNone(c))return p.add(b,a.origin,p.normalize(m.sv3d.get(),a.direction)),!0;var d=Math.max(c.xmax-c.xmin,c.ymax-c.ymin,8*Math.max(c.xmax-c.xmin,c.ymax-c.ymin));if(0===d)return p.add(b,a.origin,p.normalize(m.sv3d.get(),a.direction)),!0;var e=this.view.state.camera;const k=Math.max(0,c.xmin-e.eye[0],e.eye[0]-c.xmax);c=Math.max(0,c.ymin-e.eye[1],e.eye[1]-c.ymax);e=d/Math.max(1,Math.max(0,Math.log(d/(Math.abs(e.relativeElevation)+Number.MIN_VALUE)))**2);e=Math.max(e,Math.min(Math.sqrt(k*
k+c*c),d));d=p.scale(m.sv3d.get(),a.direction,e/p.length(a.direction));p.add(b,a.origin,d);return!0};h.intersectElevationFromScreen=function(a,b,c=0,d=null){return this.intersectElevation(this._getPickRay(a,this.tmpRay),b,c,d)};h.intersectElevation=function(a,b,c=0,d=null){if(l.isNone(a))return null;var e=l.isSome(b)?b.mode:"absolute-height",k=l.isSome(b)?l.unwrapOr(b.offset,0):0,t="on-the-ground"!==e?k+c:0;b=t/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===e)return this.view.renderCoordsHelper.intersectInfiniteManifold(a,
t,A)?(c=this.view.computeMapPointFromVec3d(A),c.z-=k,c):null;k=this.view.state.camera;const r=w.castRenderScreenPointArray3(m.sv3d.get());k.projectToRenderScreen(a.origin,r);t=new G(null,this._forEachLayer);const u=this.view.slicePlane,B=l.isSome(u)?y.sliceFilterPredicate(u):null,f=x.newIntersector(this.viewingMode);f.options.store=0;f.options.verticalOffset=b;b=a.origin;a=p.add(m.sv3d.get(),b,a.direction);f.reset(b,a,k);f.point=r;const n=l.isSome(d)?"type"in d&&"graphics"===d.type?g=>g.metadata.layerUid!==
d.uid:g=>g.metadata.graphicUid!==d.uid:null;switch(e){case "relative-to-scene":f.intersect(t.layers,r,this.tolerance,null,g=>(l.isNone(n)||n(g))&&g.metadata&&g.metadata.isElevationSource);this.externalIntersectionHandlers.forAll(g=>{4!==g.type&&2!==g.type||g.intersect(f,g.slicePlaneEnabled?B:null,f.rayBegin,f.rayEnd,r)});break;case "on-the-ground":case "relative-to-ground":this.externalIntersectionHandlers.forAll(g=>{g.isGround&&g.intersect(f,g.slicePlaneEnabled?B:null,f.rayBegin,f.rayEnd,r)})}return f.results.min.getIntersectionPoint(A)?
(e=this.view.computeMapPointFromVec3d(A),e.z=c,e):null};h.computeIntersection=function(a,b,c){if(!l.isNone(a)){var d=this.view.state.camera,e=w.castRenderScreenPointArray3(m.sv3d.get());d.projectToRenderScreen(a.origin,e);var k=new G(c,this._forEachLayer);b.options.selectOpaqueTerrainOnly=!c||!("include"in c||"exclude"in c);var t=a.origin,r=p.add(m.sv3d.get(),a.origin,a.direction);b.reset(t,r,d);b.intersect(k.layers,e,this.tolerance);a=this.view.slicePlane;var u=l.isSome(a)?y.sliceFilterPredicate(a):
null;b.intersect(k.sliceableLayers,e,this.tolerance,u);var B=c&&(c.requiresGroundFeedback||c.enableDraped);this.externalIntersectionHandlers.forAll(f=>{b.options.isFiltered=!k.filterLayerUid(f.layerUid);(f.isGround&&B||!b.options.isFiltered)&&f.intersect(b,f.slicePlaneEnabled?u:null,t,r,e)});a=m.sv3d.get();if(c&&c.enableDraped&&b.results.ground.getIntersectionPoint(a)){c=this.view.basemapTerrain.overlayManager.renderer;const f=this.view.renderCoordsHelper.spatialReference,n=m.sv3d.get();this.view.renderCoordsHelper.fromRenderCoords(a,
n,this.view.spatialReference);n[2]=l.unwrapOr(this.view.elevationProvider.getElevation(a[0],a[1],a[2],f,"ground"),0);c.intersect(b,n,b.results.ground,g=>k.filterRenderGeometry(g))}b.sortResults();a=b.results.hud;if(y.isHudIntersectorResult(a)){const f=w.castRenderScreenPointArray3(m.sv3d.get()),n=m.sv3d.get(),g=m.sv3d.get();this.unprojectHUDResultRay(a.target.center,f,n,g);c=p.distance(a.target.center,n)/p.distance(n,g)*.99;this.validateHUDIntersector.reset(n,g,d);this.validateHUDIntersector.intersect(k.layers,
f,this.tolerance);this.validateHUDIntersector.intersect(k.sliceableLayers,f,this.tolerance,u);this.externalIntersectionHandlers.forAll(D=>{k.filterLayerUid(D.layerUid)&&D.intersect(this.validateHUDIntersector,D.slicePlaneEnabled?u:null,n,g,f)});d=this.validateHUDIntersector.results.min;if(null==d.dist||c<=d.dist)b.results.min.copy(a),b.results.all.splice(0,0,a)}}};h.unprojectHUDResultRay=function(a,b,c,d){const e=this.view.state.camera;e.projectToRenderScreen(a,b);a=w.castRenderScreenPointArray3(m.sv3d.get());
a[0]=b[0];a[1]=b[1];a[2]=0;e.unprojectFromRenderScreen(a,c);a[2]=1;e.unprojectFromRenderScreen(a,d)};return q}(),z,G=function(){function q(a,b){this.layers=[];this.sliceableLayers=[];this.include=null==a?void 0:a.include;this.exclude=null==a?void 0:a.exclude;b(c=>{c.isPickable&&this.filterLayerUid(c.apiLayerUid)&&(c.isSliceable?this.sliceableLayers:this.layers).push(c)})}var h=q.prototype;h.filterLayerUid=function(a){const {include:b,exclude:c}=this;return l.isNone(a)?null==b&&null==c:(null==b||b.has(a))&&
(null==c||!c.has(a))};h.filterRenderGeometry=function(a){return this.filterLayerUid(a.layerUid)};return q}();const A=I.create(),v=w.createRenderScreenPointArray3();C.SceneIntersectionHelper=K;C.isIntersectionHandler=function(q){return"object"===typeof q&&"intersect"in q};Object.defineProperty(C,"__esModule",{value:!0})});