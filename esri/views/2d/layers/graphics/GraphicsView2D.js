// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.22/esri/copyright.txt for details.
//>>built
define("../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/tslib.es6 ../../../../core/Accessor ../../../../core/BidiText ../../../../core/HandleOwner ../../../../core/has ../../../../core/maybe ../../../../core/promiseUtils ../../../../core/accessorSupport/decorators/property ../../../../core/arrayUtils ../../../../core/accessorSupport/ensureType ../../../../core/accessorSupport/decorators/subclass ../../../../geometry/SpatialReference ../../../../geometry/support/aaBoundingRect ../../../../geometry/support/coordsUtils ../../../../geometry/support/jsonUtils ../../../../geometry/support/normalizeUtilsSync ../../../../geometry/support/spatialReferenceUtils ../../../../layers/graphics/data/projectionSupport ../../../../symbols/cim/CIMSymbolHelper ../../../../symbols/support/defaults ../../engine/webgl/definitions ../../engine/webgl/GraphicTile ../../engine/webgl/TileData ../../engine/webgl/WGLDisplayObject ../../engine/webgl/mesh/MeshData ../../engine/webgl/mesh/factories/WGLMeshFactory ../../engine/webgl/mesh/templates/WGLTemplateStore ../../engine/webgl/util/Matcher ../features/schemaUtils ../features/support/AttributeStore ../features/support/ComputedAttributeStorage ../features/support/GraphicsReader ./GraphicStore ./graphicsUtils ../support/cimSymbolUtils ../../../layers/GraphicsView ../../../webgl/capabilities".split(" "),
function(w,z,v,L,M,N,A,l,B,ja,ka,O,P,D,Q,q,R,H,I,S,E,T,U,J,V,W,X,Y,Z,K,aa,ba,ca,da,n,ea,fa,ha){function F(C,x,f){if(f.has(C))return f.get(C);x={tile:x,addedOrModified:[],removed:[]};f.set(C,x);return x}const ia=N("esri-2d-graphic-debug");v=function(C){function x(a){a=C.call(this,a)||this;a._storage=new ba.ComputedAttributeStorage;a._displayIds=new Map;a._controller=new AbortController;a._tiles=new Map;a._graphicStoreUpdate=!1;a._graphicsSet=new Set;a._matcher=Promise.resolve(null);a._tileUpdateSet=
new Set;a._tilesToUpdate=new Map;a._graphicIdToAbortController=new Map;a._attached=!1;a._highlightIds=new Map;a._updatingGraphicsTimer=null;a._hashToExpandedSymbol=new Map;a._hashToExpandedSymbolPromise=new Map;a._hashToCIMSymbolPromise=new Map;a._hashToCIM=new Map;a._processing=!1;a._needsProcessing=!1;a._pendingUpdate={added:new Set,updated:new Set,removed:new Set};a.lastUpdateId=-1;a.updateRequested=!1;a.graphicUpdateHandler=a.graphicUpdateHandler.bind(w._assertThisInitialized(a));return a}w._inheritsLoose(x,
C);var f=x.prototype;f._createMatcher=function(a,b,c){a&&(a=K.createMatcherSchema({indexCount:0,fields:{}},"feature",a),this._matcher=Z.createMatcher(a,b,null,c))};f._createDisplayId=function(a){this._displayIds.has(a)||this._displayIds.set(a,this._storage.createDisplayId());return this._displayIds.get(a)};f.initialize=function(){this._attributeStore=new aa({type:"local",initialize:b=>Promise.resolve(this.container.attributeView.initialize(b)),update:b=>this.container.attributeView.requestUpdate(b),
render:()=>this.container.requestRender()},ha());this.container.hasHighlight=()=>!!this._highlightIds.size;const a=new Y.WGLTemplateStore(this.container.getMaterialItems.bind(this.container),this.view.featuresTilingScheme.tileInfo);this._graphicStore=new da(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,b=>{this._createDisplayId(b.uid);this._setFilterState(b.uid,b.visible)},b=>{const c=this._displayIds.get(b.uid);this._displayIds.delete(b.uid);this._storage.releaseDisplayId(c)},
this._hashToCIM);this._meshFactory=new X.WGLMeshFactory(null,this.uid,a);this._templateStore=a;this.handles.add([this.watch("renderer",b=>{this._createMatcher(b,a,this.container.stage.resourceManager);for(const c of this.graphics)this._pendingUpdate.updated.add(c);this.requestUpdate()}),this.view.graphicsTileStore.on("update",b=>this._onTileUpdate(b)),this.container.on("attach",()=>{ia&&this.container.enableRenderingBounds(()=>this._graphicStore.getAllBounds());0<this.graphics.items.length&&this._graphicsChangeHandler({target:this.graphics,
added:this.graphics.items,removed:[],moved:[]});this.handles.add(this.graphics.on("change",c=>this._graphicsChangeHandler(c)),"graphics");const b=this.container.stage.resourceManager;this._createMatcher(this.renderer,a,b);this._graphicStore.setResourceManager(b);this._attached=!0;this.notifyChange("updating")})]);this._onTileUpdate({added:this.view.graphicsTileStore.tiles,removed:[]})};f.destroy=function(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=
null,this.notifyChange("updating"));this._controller.abort();this.container.destroy();this._set("graphics",null);this._graphicStore.clear();this._attributeStore=null;this._hashToExpandedSymbol.clear();this.renderer=this.view=null;this._hashToCIM.clear();this._hashToCIMSymbolPromise.clear();this._hashToExpandedSymbolPromise.clear()};f.hitTest=function(a){if(!this.view||!this.view.position)return null;const {resolution:b,rotation:c}=this.view.state;return this._graphicStore.hitTest(a.x,a.y,2,b,c)};
f.update=function(a){l.throwIfAborted(this._controller.signal);({resolution:a}=a.state);this._graphicStore.updateLevel(a);this._graphicStoreUpdate=!0;this.updateRequested=!1;0<this._pendingUpdate.updated.size&&(this._processing?this._needsProcessing=!0:this._updateGraphics())};f.viewChange=function(){this.requestUpdate()};f.requestUpdate=function(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())};f.processUpdate=function(a){this.updateRequested&&(this.updateRequested=
!1,this.update(a))};f.graphicUpdateHandler=function(a){const {graphic:b,property:c,newValue:d}=a;switch(c){case "geometry":case "symbol":this._pendingUpdate.updated.add(b);this.requestUpdate();break;case "visible":this._setFilterState(b.uid,d),this._attributeStore.sendUpdates()}};f.addHighlight=function(a){for(const b of a)this._highlightIds.has(b)?(a=this._highlightIds.get(b),this._highlightIds.set(b,a+1)):this._highlightIds.set(b,1);this._updateHighlight()};f.removeHighlight=function(a){for(const b of a)this._highlightIds.has(b)&&
(a=this._highlightIds.get(b)-1,0===a?this._highlightIds.delete(b):this._highlightIds.set(b,a));this._updateHighlight()};f._updateHighlight=function(){const a=Array.from(this._highlightIds.keys()),b=a.map(c=>this._displayIds.get(c));this._attributeStore.setHighlight(a,b)};f._getIntersectingTiles=function(a){a=this._graphicStore.getBounds(a);if(!a||0===D.width(a)||0===D.height(a))return[];const b=n.intersectingInternationalDateline(a,this.view.spatialReference);return A.isSome(b)?[...new Set([...this.view.graphicsTileStore.boundsIntersections(b[0]),
...this.view.graphicsTileStore.boundsIntersections(b[1])])]:this.view.graphicsTileStore.boundsIntersections(a)};f._updateTile=function(){var a=w._asyncToGenerator(function*(b){l.throwIfAborted(this._controller.signal);const c=b.tile;var d=this._getGraphicsData(this._templateStore,c,b.addedOrModified);d=yield this._processGraphics(c,d);l.throwIfAborted(this._controller.signal);this._patchTile(c.key,{type:"update",addOrUpdate:d,remove:b.removed,end:!0,clear:!1,sort:!1});return d});return function(b){return a.apply(this,
arguments)}}();f._patchTile=function(a,b){this._tiles.has(a)&&(a=this._tiles.get(a),this.container.onTileData(a,b),this.container.requestRender())};f._graphicsChangeHandler=function(a){const b=this._pendingUpdate;for(const c of a.added)b.added.add(c);for(const c of a.moved)b.updated.add(c);for(const c of a.removed)this._pendingUpdate.added.has(c)?b.added.delete(c):b.removed.add(c);this._processing?this._needsProcessing=!0:this._updateGraphics()};f._getGraphicsToUpdate=function(){const a={added:[],
removed:[],updated:[]};if(!this.graphics)return a;const b=this._pendingUpdate;for(const c of this.graphics.items)b.added.has(c)?a.added.push(c):b.updated.has(c)&&a.updated.push(c);for(const c of b.removed)this._graphicStore.has(c)&&a.removed.push(c);b.added.clear();b.removed.clear();b.updated.clear();return a};f._updateGraphics=function(){var a=w._asyncToGenerator(function*(){this._processing=!0;const {added:b,removed:c,updated:d}=this._getGraphicsToUpdate(),e=this._tilesToUpdate;try{if(!this._graphicStoreUpdate){var {resolution:g}=
this.view.state;this._graphicStore.updateLevel(g)}g=[];const t=Array(b.length+c.length);for(let h=0;h<d.length;h++){var k=d[h];const r=this._getIntersectingTiles(k);for(const y of r){var m=y.id;F(m,y,e).removed.push(this._displayIds.get(k.uid))}g.push(this._updateGraphic(k,null));t[h]=k}var u=d.length;for(k=0;k<b.length;k++){const h=b[k];t[u+k]=h;this._graphicsSet.add(h);g.push(this._addGraphic(h))}for(const h of c){this._abortProcessingGraphic(h.uid);const r=this._getIntersectingTiles(h);for(const y of r)m=
y.id,F(m,y,e).removed.push(this._displayIds.get(h.uid));this._graphicsSet.delete(h);this._graphicStore.remove(h)}this._flipUpdatingGraphics();yield Promise.all(g);let p;for(u=0;u<t.length;u++){p=t[u];const h=this._getIntersectingTiles(p);for(const r of h)m=r.id,F(m,r,e).addedOrModified.push(p)}this._graphicStore.updateZ();m=[];for(const [,h]of e)m.push(this._updateTile(h));yield Promise.all(m)}catch(t){l.isAbortError(t)}for(const t of c)try{const p=yield this._getSymbolForGraphic(t,{});if(p){const h=
p.hash();this._hashToExpandedSymbol.delete(h)}}catch(p){l.isAbortError(p)}e.clear();this.notifyChange("updating");this._processing=!1;this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())});return function(){return a.apply(this,arguments)}}();f._getArcadeInfo=function(a){const b=(a.attributes?Object.keys(a.attributes):[]).map(c=>({name:c,alias:c,type:"string"===typeof a.attributes[c]?"esriFieldTypeString":"esriFieldTypeDouble"}));return A.isNone(a.geometry)?null:{geometryType:q.getJsonType(a.geometry),
spatialReference:P.fromJSON(a.geometry.spatialReference),fields:b}};f._getSymbolForGraphic=function(a,b){l.throwIfAborted(this._controller.signal);return A.isSome(a.symbol)?Promise.resolve(a.symbol):A.isSome(this.renderer)?this.renderer.getSymbolAsync(a,{scale:this.view.scale,abortOptions:b}):Promise.resolve(this._getNullSymbol(a))};f._getCIMSymbol=function(a,b,c){var d=this._hashToCIM.get(b);if(d)return Promise.resolve(d);a=S.symbolToCIM(a);if(A.isSome(a)){if("CIMSymbolReference"===a.type)return d=
a,this._hashToCIM.set(b,d),Promise.resolve(d);if(d=this._hashToCIMSymbolPromise.get(b))return d;d=a.fetchCIMSymbol(c).then(e=>{this._hashToCIM.set(b,e.data);this._hashToCIMSymbolPromise.delete(b);return e}).catch(e=>{this._hashToCIMSymbolPromise.delete(b);l.throwIfAbortError(e);return null});this._hashToCIMSymbolPromise.set(b,d);return d}return Promise.resolve(null)};f._expandCIMSymbol=function(a,b,c,d){var e=this._hashToExpandedSymbol.get(c);if(e)return Promise.resolve(e);if(e=this._hashToExpandedSymbolPromise.get(c))return e;
e=this.container.stage;b=this._getArcadeInfo(b);a=K.createSymbolSchema(a);e=ea.expandSymbol(a,b,e.resourceManager,d);this._hashToExpandedSymbolPromise.set(c,e);e.then(g=>{this._hashToExpandedSymbol.set(c,g);this._hashToExpandedSymbolPromise.delete(c);return g});return e};f._getSymbolResources=function(){var a=w._asyncToGenerator(function*(b,c){l.throwIfAborted(this._controller.signal);return this.container.stage?this._getSymbolForGraphic(b,c).then(d=>{const e=d.hash();return this._getCIMSymbol(d,
e,c).then(g=>A.isNone(g)?null:this._expandCIMSymbol(g,b,e,c).then(k=>{const m=k.layers.filter(u=>"text"===u.type&&"string"===typeof u.text);if(m&&0<m.length){const u=Array(m.length);for(let p=0;p<m.length;p++){const h=m[p],r=[],[y]=L.bidiText(h.text);for(let G=0;G<y.length;G++)r.push(y.charCodeAt(G));u[p]={symbol:h,id:p,glyphIds:r}}const t=new Map;return this.container.getMaterialItems(u).then(p=>{for(let h=0;h<m.length;h++){const r=m[h];t.set(r.cim,{text:r.text,mosaicItem:p[h].mosaicItem})}return{symbol:k,
textInfo:t,hash:e}})}return{symbol:k,hash:e}}))}).catch(d=>{l.throwIfAbortError(d);return null}):null});return function(b,c){return a.apply(this,arguments)}}();f._projectAndNormalizeGeometry=function(){var a=w._asyncToGenerator(function*(b,c){l.throwIfAborted(this._controller.signal);if(A.isNone(b.geometry)||"mesh"===b.geometry.type)return null;var d=b.geometry;q.isPolygon(d)?d.rings=d.rings:q.isPolyline(d)?d.paths=d.paths:q.isExtent(d)&&(b=yield this._getSymbolForGraphic(b,c),l.throwIfAborted(this._controller.signal),
d=n.isMarkerSymbol(b.type)||n.isTextSymbol(b.type)?d.center:n.polygonFromExtent(d));yield I.checkProjectionSupport(d.spatialReference,this.view.spatialReference);b=R.normalizeCentralMeridianSync(d);d=I.project(b,d.spatialReference,this.view.spatialReference);Q.closeRingsAndFixWinding(d);return d});return function(b,c){return a.apply(this,arguments)}}();f._onTileUpdate=function(a){const b=H.getInfo(this.view.spatialReference);if(a.added&&0<a.added.length)for(const c of a.added)this._addNewTile(c,b);
if(a.removed&&0<a.removed.length)for(const c of a.removed)this._removeTile(c.key)};f._addGraphic=function(){var a=w._asyncToGenerator(function*(b){this._abortProcessingGraphic(b.uid);l.throwIfAborted(this._controller.signal);var c=new AbortController;this._graphicIdToAbortController.set(b.uid,c);c={signal:c.signal};try{yield this._addOrUpdateGraphic(b,c),l.throwIfAborted(this._controller.signal),this._graphicIdToAbortController.delete(b.uid)}catch(d){if(this._graphicIdToAbortController.delete(b.uid),
!l.isAbortError(d))throw d;}});return function(b){return a.apply(this,arguments)}}();f._updateGraphic=function(a,b){l.throwIfAborted(this._controller.signal);const c=this._projectAndNormalizeGeometry(a,b);b=this._getSymbolResources(a,b);return Promise.all([c,b]).then(([d,e])=>{l.throwIfAborted(this._controller.signal);this._graphicStore.addOrModify(a,e,d)})};f._addOrUpdateGraphic=function(a,b){l.throwIfAborted(this._controller.signal);const c=this._projectAndNormalizeGeometry(a,b);b=this._getSymbolResources(a,
b);return Promise.all([c,b]).then(([d,e])=>{l.throwIfAborted(this._controller.signal);this._graphicsSet.has(a)&&this._graphicStore.addOrModify(a,e,d)})};f._addTile=function(a){var b=this.view.featuresTilingScheme.getTileBounds(D.create(),a);b=new U.GraphicTile(a,b[0],b[3]);this._tiles.set(a,b);this.container.addChild(b);return b};f._addNewTile=function(){var a=w._asyncToGenerator(function*(b,c){const d=this._addTile(b.key),e=this._graphicStore.queryTileData(this._templateStore,b);if(0!==e.length){if(c){c=
Math.round((c.valid[1]-c.valid[0])/b.resolution);for(var g of e)g.geometry&&(q.isPoint(g.geometry)||q.isMultipoint(g.geometry))&&this._wrapPoints(g,c)}g=b.key;this._tileUpdateSet.add(b.key);this.notifyChange("updating");try{const k={type:"update",clear:!1,addOrUpdate:yield this._processGraphics(b,e),remove:[],end:!0,sort:!1};d.patch(k);this._tileUpdateSet.delete(g);this.notifyChange("updating")}catch(k){if(this._tileUpdateSet.delete(g),this.notifyChange("updating"),!l.isAbortError(k))throw k;}}});
return function(b,c){return a.apply(this,arguments)}}();f._removeTile=function(a){if(this._tiles.has(a)){var b=this._tiles.get(a);this.container.removeChild(b);b.destroy();this._tiles.delete(a)}};f._setFilterState=function(a,b){const c=this._displayIds.get(a);a=this._attributeStore.getHighlightFlag(a);this._attributeStore.setData(c,0,0,a|(b?T.FILTER_FLAG_0:0))};f._getGraphicsData=function(a,b,c){const d=H.getInfo(this.view.spatialReference);a=this._graphicStore.getGraphicsData(a,b,c);if(d){b=Math.round((d.valid[1]-
d.valid[0])/b.resolution);for(const e of a)e.geometry&&(q.isPoint(e.geometry)||q.isMultipoint(e.geometry))&&this._wrapPoints(e,b)}return a};f._wrapPoints=function(a,b){const c=a.geometry;q.isMultipoint(c)?this._wrapMultipoint(c,b):this._wrapPoint(a,b)};f._wrapMultipoint=function(a,b){var c=a.points;const d=[];let e=0,g=0;for(const [k,m]of c)d.push([k+e,m]),e=0,b===n.TILE_SIZE?(c=5*n.PIXEL_BUFFER,k+g<c?(d.push([b,0]),e=-b):k+g>n.TILE_SIZE-c&&(d.push([-b,0]),e=b)):k+g<-n.PIXEL_BUFFER?(d.push([b,0]),
e=-b):k+g>n.TILE_SIZE+n.PIXEL_BUFFER&&(d.push([-b,0]),e=b),g+=k;a.points=d};f._wrapPoint=function(a,b){const c=a.geometry;if(b===n.TILE_SIZE){const d=5*n.PIXEL_BUFFER;c.x<d?a.geometry={points:[[c.x,c.y],[b,0]]}:c.x>n.TILE_SIZE-d&&(a.geometry={points:[[c.x,c.y],[-b,0]]})}else c.x<-n.PIXEL_BUFFER?a.geometry={points:[[c.x,c.y],[b,0]]}:c.x>n.TILE_SIZE+n.PIXEL_BUFFER&&(a.geometry={points:[[c.x,c.y],[-b,0]]})};f._processGraphics=function(a,b,c){if(!b||!b.length||!this._meshFactory)return null;const d=ca.GraphicsReader.from(b),
e=this._meshFactory;return this._matcher.then(g=>e.analyzeGraphics(d,this.container.stage.resourceManager,g,null,null,c).then(()=>{this._attributeStore.sendUpdates();return this._processAnalyzedGraphics(a,d)}))};f._processAnalyzedGraphics=function(a,b){const c=this._meshFactory;var d=b.getSize();b=b.getCursor();const e=new W.MeshData(a.key.id,{features:d,records:d,metrics:0},{fill:"default"},!1,!1);for(d=[];b.next();){const g=b.readGraphic();g.insertAfter=-1===g.insertAfter?-1:this._displayIds.get(g.insertAfter);
g.displayId=this._displayIds.get(g.attributes[this.uid]);const k=new V(g.displayId);k.insertAfter=g.insertAfter;d.push(k);c.writeGraphic(e,b,a.level)}a=e.serialize(a.tileInfoView.tileInfo.isWrappable);return 1!==a.length?new J.TileData:J.TileData.fromVertexData(a[0].message,d)};f._abortProcessingGraphic=function(a){this._graphicIdToAbortController.has(a)&&this._graphicIdToAbortController.get(a).abort()};f._getNullSymbol=function(a){a=a.geometry;return q.isPolyline(a)?E.errorPolylineSymbol2D:q.isPolygon(a)||
q.isExtent(a)?E.errorPolygonSymbol2D:E.errorPointSymbol2D};f._flipUpdatingGraphics=function(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer);this._updatingGraphicsTimer=setTimeout(()=>{this._updatingGraphicsTimer=null;this.notifyChange("updating")},160);this.notifyChange("updating")};w._createClass(x,[{key:"updating",get:function(){return!this._attached||null!==this._updatingGraphicsTimer||0<this._tileUpdateSet.size||0<this._tilesToUpdate.size}}]);return x}(fa.GraphicsView(M.HandleOwnerMixin(v)));
z.__decorate([B.property({constructOnly:!0})],v.prototype,"requestUpdateCallback",void 0);z.__decorate([B.property()],v.prototype,"container",void 0);z.__decorate([B.property({constructOnly:!0})],v.prototype,"graphics",void 0);z.__decorate([B.property()],v.prototype,"updating",null);z.__decorate([B.property()],v.prototype,"view",void 0);z.__decorate([B.property()],v.prototype,"updateRequested",void 0);return v=z.__decorate([O.subclass("esri.views.2d.layers.support.GraphicsView2D")],v)});