// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.22/esri/copyright.txt for details.
//>>built
define("../../../../chunks/_rollupPluginBabelHelpers ../../../../core/maybe ../../../../geometry/support/aaBoundingRect ../../../../geometry/support/centroid ../../../../geometry/support/jsonUtils ../../../../geometry/support/normalizeUtilsCommon ../../../../geometry/support/quantizationUtils ../../../../layers/graphics/featureConversionUtils ../../../../layers/graphics/OptimizedGeometry ./graphicsUtils".split(" "),function(A,B,m,C,n,D,p,q,h,w){function x(d){d.coords.length=0;d.lengths.length=0}const l=
new h,u=new h;h=function(){function d(){this.bounds=m.create();this.graphic=null}d.acquire=function(a=null,f,b,g,c){let e;0===d._pool.length?e=new d:(e=d._pool.pop(),this._set.delete(e));e.acquire(a,f,b,g,c);return e};d.release=function(a){a&&!this._set.has(a)&&(a.release(),this._pool.push(a),this._set.add(a))};d.getCentroidQuantized=function(a,f){if(n.isPolygon(a.geometry)){const b=a.symbol;if(B.isNone(b))return null;if(w.isMarkerSymbol(b.type)||w.isTextSymbol(b.type))return a=C.polygonCentroid(a.geometry),
p.quantizePoint(f,{},{x:a[0],y:a[1]},!1,!1)}return null};var r=d.prototype;r.acquire=function(a=null,f,b,g,c){a&&this.set(a,f,b,g,c)};r.release=function(){this.geometry=this.symbolResource=this.graphic=null};r.set=function(a,f,b,g,c){this.graphic=a;this.geometry=b;this.symbolResource=f;this.bounds=g;c&&(this.size=c)};r.getGeometryQuantized=function(a,f,b,g){const c=this.geometry;if(n.isPolygon(c)){if(b=c.rings,1===b.length&&2===b[0].length)return p.quantizeGeometry(a,{paths:[[b[0][0],b[0][1]]]})}else{if(n.isPolyline(c))return x(l),
x(u),q.convertFromPolyline(l,c),q.generalizeOptimizedGeometry(u,l,c.hasZ,c.hasM,"esriGeometryPolyline",a.scale[0]),q.quantizeOptimizedGeometry(l,u,c.hasZ,c.hasM,"esriGeometryPolyline",a),q.convertToPolyline(l,c.hasZ,c.hasM);if(n.isMultipoint(c)){const e=.5*g*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),[y,v]=D.getSpatialReferenceMinMaxX(b),z=v-y;b=c.points.filter(k=>{if(k[0]+e>v||k[0]-e<y){const t=[...k];t[0]=k[0]+e>v?t[0]-z:t[0]+z;return m.containsPointWithMargin(f,
k,e)||m.containsPointWithMargin(f,t,e)}return m.containsPointWithMargin(f,k,e)});return 0===b.length?{points:b}:p.quantizeGeometry(a,{points:b})}}return p.quantizeGeometry(a,this.geometry)};A._createClass(d,[{key:"symbol",get:function(){return this.symbolResource.symbol}}]);return d}();h._pool=[];h._set=new Set;return h});