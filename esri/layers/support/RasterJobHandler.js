// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.22/esri/copyright.txt for details.
//>>built
define(["../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/maybe","../../core/workers/workers","./PixelBlock"],function(g,h,l,n,k){return function(){function m(){this._workerThread=null;this._destroyed=!1}var e=m.prototype;e.initialize=function(){var c=g._asyncToGenerator(function*(){const a=yield n.open("RasterWorker");this._destroyed?a.close():this._workerThread=a});return function(){return c.apply(this,arguments)}}();e.destroy=function(){this._destroyed=!0;this._workerThread&&
(this._workerThread.close(),this._workerThread=null)};e.convertVectorFieldData=function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");return(a=yield this._workerThread.invoke("convertVectorFieldData",{pixelBlock:a.pixelBlock.toJSON(),type:a.dataType},b))?new k(a):null});return function(a,b){return c.apply(this,arguments)}}();e.decode=function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection",
"no available worker connection");return(a=yield this._workerThread.invoke("decode",a,b))?new k(a):null});return function(a,b){return c.apply(this,arguments)}}();e.symbolize=function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");a={extent:a.extent&&a.extent.toJSON(),pixelBlock:l.isSome(a.pixelBlock)&&a.pixelBlock.toJSON(),simpleStretchParams:a.simpleStretchParams,bandIds:a.bandIds};return(b=yield this._workerThread.invoke("symbolize",
a,b))?new k(b):null});return function(a,b){return c.apply(this,arguments)}}();e.updateSymbolizer=function(){var c=g._asyncToGenerator(function*(a,b){var d;if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");const f=null==a?void 0:null==(d=a.rendererJSON)?void 0:d.histograms;yield Promise.all(this._workerThread.broadcast("updateSymbolizer",{symbolizerJSON:a.toJSON(),histograms:f},b))});return function(a,b){return c.apply(this,arguments)}}();e.stretch=
function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),stretchParams:a.stretchParams};return(b=yield this._workerThread.invoke("stretch",a,b))?new k(b):null});return function(a,b){return c.apply(this,arguments)}}();e.split=function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection",
"no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON(),tileSize:a.tileSize,maximumPyramidLevel:a.maximumPyramidLevel};const d=yield this._workerThread.invoke("split",a,b);d&&d.forEach((f,p)=>{d.set(p,f?k.fromJSON(f):null)});return Promise.resolve(d)});return function(a,b){return c.apply(this,arguments)}}();e.estimateStatisticsHistograms=function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection",
"no available worker connection");if(null==a||!a.pixelBlock)return null;a={srcPixelBlock:a.pixelBlock.toJSON()};b=yield this._workerThread.invoke("estimateStatisticsHistograms",a,b);return Promise.resolve(b)});return function(a,b){return c.apply(this,arguments)}}();e.mosaicAndTransform=function(){var c=g._asyncToGenerator(function*(a,b){var d;if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");if(null==a||null==(d=a.srcPixelBlocks)||!d.length)return null;
a={...a,srcPixelBlocks:a.srcPixelBlocks.map(f=>l.isSome(f)?f.toJSON():null)};return(b=yield this._workerThread.invoke("mosaicAndTransform",a,b))?new k(b):null});return function(a,b){return c.apply(this,arguments)}}();e.createStreamlinesMesh=function(){var c=g._asyncToGenerator(function*(a,b){if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");const d={buffer:a.flowData.data.buffer,width:a.flowData.width,height:a.flowData.height};a=yield this._workerThread.invoke("createStreamlinesMesh",
{flowData:d,rendererSettings:a.rendererSettings},{...b,transferList:[d.buffer]});return{vertexData:new Float32Array(a.vertexBuffer),indexData:new Uint32Array(a.indexBuffer)}});return function(a,b){return c.apply(this,arguments)}}();e.getProjectionOffsetGrid=function(c,a){if(!this._workerThread)throw new h("raster-jobhandler:no-connection","no available worker connection");const b=l.isSome(c.datumTransformation)?c.datumTransformation.steps.map(f=>({wkid:f.wkid,wkt:f.wkt,isInverse:f.isInverse})):null,
d=l.isSome(c.rasterTransform)?c.rasterTransform.toJSON():null;c={projectedExtent:c.projectedExtent.toJSON(),srcBufferExtent:c.srcBufferExtent.toJSON(),pixelSize:c.pixelSize,hasWrapAround:c.hasWrapAround,spacing:c.spacing,datumTransformationSteps:b,rasterTransform:d,isAdaptive:c.isAdaptive};return this._workerThread.invoke("getProjectionOffsetGrid",c,a)};return m}()});